package ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities.Formation_CentreFormation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Mob_Formation_CentreFormation".
*/
public class Formation_CentreFormationDao extends AbstractDao<Formation_CentreFormation, Long> {

    public static final String TABLENAME = "Tbl_Mob_Formation_CentreFormation";

    /**
     * Properties of entity Formation_CentreFormation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FormationCentreFormationId = new Property(0, Long.class, "formationCentreFormationId", true, "formationCentreFormationId");
        public final static Property FormationId = new Property(1, Long.class, "formationId", false, "formationId");
        public final static Property CentreFormationId = new Property(2, Long.class, "centreFormationId", false, "centreFormationId");
        public final static Property Statut = new Property(3, Short.class, "statut", false, "statut");
    };


    public Formation_CentreFormationDao(DaoConfig config) {
        super(config);
    }
    
    public Formation_CentreFormationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Mob_Formation_CentreFormation\" (" + //
                "\"formationCentreFormationId\" INTEGER PRIMARY KEY ," + // 0: formationCentreFormationId
                "\"formationId\" INTEGER," + // 1: formationId
                "\"centreFormationId\" INTEGER," + // 2: centreFormationId
                "\"statut\" INTEGER);"); // 3: statut
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Mob_Formation_CentreFormation\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Formation_CentreFormation entity) {
        stmt.clearBindings();
 
        Long formationCentreFormationId = entity.getFormationCentreFormationId();
        if (formationCentreFormationId != null) {
            stmt.bindLong(1, formationCentreFormationId);
        }
 
        Long formationId = entity.getFormationId();
        if (formationId != null) {
            stmt.bindLong(2, formationId);
        }
 
        Long centreFormationId = entity.getCentreFormationId();
        if (centreFormationId != null) {
            stmt.bindLong(3, centreFormationId);
        }
 
        Short statut = entity.getStatut();
        if (statut != null) {
            stmt.bindLong(4, statut);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Formation_CentreFormation readEntity(Cursor cursor, int offset) {
        Formation_CentreFormation entity = new Formation_CentreFormation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // formationCentreFormationId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // formationId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // centreFormationId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) // statut
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Formation_CentreFormation entity, int offset) {
        entity.setFormationCentreFormationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFormationId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCentreFormationId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStatut(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Formation_CentreFormation entity, long rowId) {
        entity.setFormationCentreFormationId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Formation_CentreFormation entity) {
        if(entity != null) {
            return entity.getFormationCentreFormationId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
