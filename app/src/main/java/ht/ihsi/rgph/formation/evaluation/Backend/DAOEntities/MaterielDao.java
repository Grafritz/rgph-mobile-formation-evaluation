package ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities.Materiel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Mob_Materiel".
*/
public class MaterielDao extends AbstractDao<Materiel, Long> {

    public static final String TABLENAME = "Tbl_Mob_Materiel";

    /**
     * Properties of entity Materiel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MaterielId = new Property(0, Long.class, "MaterielId", true, "MaterielId");
        public final static Property Imei = new Property(1, String.class, "Imei", false, "Imei");
        public final static Property Serial = new Property(2, String.class, "Serial", false, "Serial");
        public final static Property Model = new Property(3, String.class, "Model", false, "Model");
        public final static Property Version = new Property(4, String.class, "Version", false, "Version");
        public final static Property AgentId = new Property(5, Integer.class, "AgentId", false, "AgentId");
        public final static Property DateAssignation = new Property(6, String.class, "DateAssignation", false, "DateAssignation");
        public final static Property IsConfigured = new Property(7, Integer.class, "IsConfigured", false, "IsConfigured");
        public final static Property Synchronisation = new Property(8, String.class, "Synchronisation", false, "Synchronisation");
    };


    public MaterielDao(DaoConfig config) {
        super(config);
    }
    
    public MaterielDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Mob_Materiel\" (" + //
                "\"MaterielId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: MaterielId
                "\"Imei\" TEXT," + // 1: Imei
                "\"Serial\" TEXT," + // 2: Serial
                "\"Model\" TEXT," + // 3: Model
                "\"Version\" TEXT," + // 4: Version
                "\"AgentId\" INTEGER," + // 5: AgentId
                "\"DateAssignation\" TEXT," + // 6: DateAssignation
                "\"IsConfigured\" INTEGER," + // 7: IsConfigured
                "\"Synchronisation\" TEXT);"); // 8: Synchronisation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Mob_Materiel\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Materiel entity) {
        stmt.clearBindings();
 
        Long MaterielId = entity.getMaterielId();
        if (MaterielId != null) {
            stmt.bindLong(1, MaterielId);
        }
 
        String Imei = entity.getImei();
        if (Imei != null) {
            stmt.bindString(2, Imei);
        }
 
        String Serial = entity.getSerial();
        if (Serial != null) {
            stmt.bindString(3, Serial);
        }
 
        String Model = entity.getModel();
        if (Model != null) {
            stmt.bindString(4, Model);
        }
 
        String Version = entity.getVersion();
        if (Version != null) {
            stmt.bindString(5, Version);
        }
 
        Integer AgentId = entity.getAgentId();
        if (AgentId != null) {
            stmt.bindLong(6, AgentId);
        }
 
        String DateAssignation = entity.getDateAssignation();
        if (DateAssignation != null) {
            stmt.bindString(7, DateAssignation);
        }
 
        Integer IsConfigured = entity.getIsConfigured();
        if (IsConfigured != null) {
            stmt.bindLong(8, IsConfigured);
        }
 
        String Synchronisation = entity.getSynchronisation();
        if (Synchronisation != null) {
            stmt.bindString(9, Synchronisation);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Materiel readEntity(Cursor cursor, int offset) {
        Materiel entity = new Materiel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // MaterielId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Imei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Serial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Model
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Version
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // AgentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DateAssignation
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // IsConfigured
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Synchronisation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Materiel entity, int offset) {
        entity.setMaterielId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAgentId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDateAssignation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsConfigured(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSynchronisation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Materiel entity, long rowId) {
        entity.setMaterielId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Materiel entity) {
        if(entity != null) {
            return entity.getMaterielId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
