package ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities.CentreFormation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Mob_CentreFormation".
*/
public class CentreFormationDao extends AbstractDao<CentreFormation, Long> {

    public static final String TABLENAME = "Tbl_Mob_CentreFormation";

    /**
     * Properties of entity CentreFormation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CentreFormationId = new Property(0, Long.class, "centreFormationId", true, "centreFormationId");
        public final static Property NomCentre = new Property(1, String.class, "nomCentre", false, "nomCentre");
        public final static Property DeptId = new Property(2, String.class, "deptId", false, "deptId");
        public final static Property ComId = new Property(3, String.class, "comId", false, "comId");
        public final static Property VqseId = new Property(4, String.class, "vqseId", false, "vqseId");
        public final static Property Adresse = new Property(5, String.class, "adresse", false, "adresse");
        public final static Property Responsable = new Property(6, String.class, "responsable", false, "responsable");
    };


    public CentreFormationDao(DaoConfig config) {
        super(config);
    }
    
    public CentreFormationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Mob_CentreFormation\" (" + //
                "\"centreFormationId\" INTEGER PRIMARY KEY ," + // 0: centreFormationId
                "\"nomCentre\" TEXT," + // 1: nomCentre
                "\"deptId\" TEXT," + // 2: deptId
                "\"comId\" TEXT," + // 3: comId
                "\"vqseId\" TEXT," + // 4: vqseId
                "\"adresse\" TEXT," + // 5: adresse
                "\"responsable\" TEXT);"); // 6: responsable
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Mob_CentreFormation\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CentreFormation entity) {
        stmt.clearBindings();
 
        Long centreFormationId = entity.getCentreFormationId();
        if (centreFormationId != null) {
            stmt.bindLong(1, centreFormationId);
        }
 
        String nomCentre = entity.getNomCentre();
        if (nomCentre != null) {
            stmt.bindString(2, nomCentre);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(3, deptId);
        }
 
        String comId = entity.getComId();
        if (comId != null) {
            stmt.bindString(4, comId);
        }
 
        String vqseId = entity.getVqseId();
        if (vqseId != null) {
            stmt.bindString(5, vqseId);
        }
 
        String adresse = entity.getAdresse();
        if (adresse != null) {
            stmt.bindString(6, adresse);
        }
 
        String responsable = entity.getResponsable();
        if (responsable != null) {
            stmt.bindString(7, responsable);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CentreFormation readEntity(Cursor cursor, int offset) {
        CentreFormation entity = new CentreFormation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // centreFormationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nomCentre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deptId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vqseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adresse
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // responsable
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CentreFormation entity, int offset) {
        entity.setCentreFormationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNomCentre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeptId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVqseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdresse(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResponsable(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CentreFormation entity, long rowId) {
        entity.setCentreFormationId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CentreFormation entity) {
        if(entity != null) {
            return entity.getCentreFormationId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
