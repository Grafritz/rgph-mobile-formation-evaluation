package ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities.SalleFormation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Mob_SalleFormation".
*/
public class SalleFormationDao extends AbstractDao<SalleFormation, Long> {

    public static final String TABLENAME = "Tbl_Mob_SalleFormation";

    /**
     * Properties of entity SalleFormation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SalleFormationId = new Property(0, Long.class, "salleFormationId", true, "salleFormationId");
        public final static Property CentreFormationId = new Property(1, Long.class, "centreFormationId", false, "centreFormationId");
        public final static Property NomSalle = new Property(2, String.class, "nomSalle", false, "nomSalle");
        public final static Property CapaciteSalle = new Property(3, Integer.class, "capaciteSalle", false, "capaciteSalle");
    };


    public SalleFormationDao(DaoConfig config) {
        super(config);
    }
    
    public SalleFormationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Mob_SalleFormation\" (" + //
                "\"salleFormationId\" INTEGER PRIMARY KEY ," + // 0: salleFormationId
                "\"centreFormationId\" INTEGER," + // 1: centreFormationId
                "\"nomSalle\" TEXT," + // 2: nomSalle
                "\"capaciteSalle\" INTEGER);"); // 3: capaciteSalle
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Mob_SalleFormation\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SalleFormation entity) {
        stmt.clearBindings();
 
        Long salleFormationId = entity.getSalleFormationId();
        if (salleFormationId != null) {
            stmt.bindLong(1, salleFormationId);
        }
 
        Long centreFormationId = entity.getCentreFormationId();
        if (centreFormationId != null) {
            stmt.bindLong(2, centreFormationId);
        }
 
        String nomSalle = entity.getNomSalle();
        if (nomSalle != null) {
            stmt.bindString(3, nomSalle);
        }
 
        Integer capaciteSalle = entity.getCapaciteSalle();
        if (capaciteSalle != null) {
            stmt.bindLong(4, capaciteSalle);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SalleFormation readEntity(Cursor cursor, int offset) {
        SalleFormation entity = new SalleFormation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // salleFormationId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // centreFormationId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nomSalle
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // capaciteSalle
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SalleFormation entity, int offset) {
        entity.setSalleFormationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCentreFormationId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNomSalle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCapaciteSalle(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SalleFormation entity, long rowId) {
        entity.setSalleFormationId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SalleFormation entity) {
        if(entity != null) {
            return entity.getSalleFormationId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
