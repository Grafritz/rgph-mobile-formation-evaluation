package ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.rgph.formation.evaluation.Backend.DAOEntities.Question_FormulaireExercices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Tbl_Mob_Question_FormulaireExercices".
*/
public class Question_FormulaireExercicesDao extends AbstractDao<Question_FormulaireExercices, Long> {

    public static final String TABLENAME = "Tbl_Mob_Question_FormulaireExercices";

    /**
     * Properties of entity Question_FormulaireExercices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property CodeFormulaireExercice = new Property(1, Long.class, "codeFormulaireExercice", false, "codeFormulaireExercice");
        public final static Property CodeQuestion = new Property(2, Long.class, "codeQuestion", false, "codeQuestion");
        public final static Property OrdreQuestion = new Property(3, String.class, "ordreQuestion", false, "ordreQuestion");
        public final static Property EstDebutQuestion = new Property(4, Boolean.class, "estDebutQuestion", false, "estDebutQuestion");
    };


    public Question_FormulaireExercicesDao(DaoConfig config) {
        super(config);
    }
    
    public Question_FormulaireExercicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Tbl_Mob_Question_FormulaireExercices\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"codeFormulaireExercice\" INTEGER," + // 1: codeFormulaireExercice
                "\"codeQuestion\" INTEGER," + // 2: codeQuestion
                "\"ordreQuestion\" TEXT," + // 3: ordreQuestion
                "\"estDebutQuestion\" INTEGER);"); // 4: estDebutQuestion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Tbl_Mob_Question_FormulaireExercices\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question_FormulaireExercices entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Long codeFormulaireExercice = entity.getCodeFormulaireExercice();
        if (codeFormulaireExercice != null) {
            stmt.bindLong(2, codeFormulaireExercice);
        }
 
        Long codeQuestion = entity.getCodeQuestion();
        if (codeQuestion != null) {
            stmt.bindLong(3, codeQuestion);
        }
 
        String ordreQuestion = entity.getOrdreQuestion();
        if (ordreQuestion != null) {
            stmt.bindString(4, ordreQuestion);
        }
 
        Boolean estDebutQuestion = entity.getEstDebutQuestion();
        if (estDebutQuestion != null) {
            stmt.bindLong(5, estDebutQuestion ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question_FormulaireExercices readEntity(Cursor cursor, int offset) {
        Question_FormulaireExercices entity = new Question_FormulaireExercices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codeFormulaireExercice
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // codeQuestion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ordreQuestion
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // estDebutQuestion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question_FormulaireExercices entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeFormulaireExercice(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCodeQuestion(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOrdreQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstDebutQuestion(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question_FormulaireExercices entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question_FormulaireExercices entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
